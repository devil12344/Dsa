1]]]Experiment No.2 :Write a Python program to compute following operations on String:
a) To display word with the longest length
b) To determines the frequency of occurrence of particular character in the string
c) To check whether given string is palindrome or not
d) To display index of first appearance of the substring
e) To count the occurrences of each word in a given string



# a) To display word with the longest length

statement = "welcome to DSL lab"
words = max(statement.split(), key=len)
print("The longest word is:", words)
print("The longest word length is:", len(words))

# b) To determines the frequency of occurrence of particular character in the string

string="welcome to DSL lab" 
c='e' 
count=0 
for i in range(len(string)): 
    frequency=string.count(c) 
print(frequency)

# c) To check whether given string is palindrome or not

def ispalindrome(s):
    return S==S[::-1]
    
S="Nyan"
ans= ispalindrome(S)

if ans:
    print("yes")
else:
    print("No")

# d) To display index of first appearance of the substring 

string = "Today is Tuesday"
sub = "da"

for i in range(len(string)):
    si = []
    k = i
    flag = 0
    
    for j in range(len(sub)):
        if k >= len(string) or string[k] != sub[j]:
            flag = 1
            break
        k += 1
    
    if flag == 0:
        si.append(i)
        print(si)

# e) To count the occurrences of each word in a given string

string = "Today is Tuesday and Today is freshers party"
list1 = []
list1 = string.split()
print("Old list is ", list1)

newlist = []
newlist_l = []

for i in list1:
    if i not in newlist:
        newlist.append(i)

print("Newlist is", newlist)

for i in range(0, len(newlist)):
    count = 0
    for j in range(len(list1)):
        if newlist[i] == list1[j]:
            count += 1
    newlist_l.append(count)

for i in range(0, len(newlist)):
    print(newlist[i], newlist_l[i])


#2.

'''
This program is created by ATHARVA PAWAR

------------------------------------------------------------------------------------------------------------------------------------------------

2]]]Experiment No. 9 : Write a Python Program to compute following computation on matrices :
                   a)Addition of two matrices
                   b)Subtraction of two matrices
                   c)Multiplication of two matrices
                   d)Transpose of a matix
'''

import numpy

# initializing matrices
x = numpy.array([[1, 2], [4, 5]])
y = numpy.array([[7, 8], [9, 10]])

# using add() to add matrices
print("The element wise addition of matrix is : ")
print(numpy.add(x, y))

# using subtract() to subtract matrices
print("The element wise subtraction of matrix is : ")
print(numpy.subtract(x, y))

# using dot() to multiply matrices
print ("The product of matrices is : ")
print (numpy.dot(x,y))


# using "T" to transpose the matrix
print("The transpose of given matrix is : ")
print(x.T)


# Created by ATHARVA PAWAR

#or

''''
def matrix_addition(matrix1, matrix2):
    result = []
    for i in range(len(matrix1)):
        row = []
        for j in range(len(matrix1[0])):
            row.append(matrix1[i][j] + matrix2[i][j])
        result.append(row)
    return result

def matrix_subtraction(matrix1, matrix2):
    result = []
    for i in range(len(matrix1)):
        row = []
        for j in range(len(matrix1[0])):
            row.append(matrix1[i][j] - matrix2[i][j])
        result.append(row)
    return result

def matrix_multiplication(matrix1, matrix2):
    result = []
    for i in range(len(matrix1)):
        row = []
        for j in range(len(matrix2[0])):
            temp = 0
            for k in range(len(matrix2)):
                temp += matrix1[i][k] * matrix2[k][j]
            row.append(temp)
        result.append(row)
    return result

def matrix_transpose(matrix):
    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]

# Example matrices
matrix_A = [[1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]]

matrix_B = [[9, 8, 7],
            [6, 5, 4],
            [3, 2, 1]]

# Addition of matrices
result_addition = matrix_addition(matrix_A, matrix_B)
print("Addition of matrices:")
for row in result_addition:
    print(row)

# Subtraction of matrices
result_subtraction = matrix_subtraction(matrix_A, matrix_B)
print("\nSubtraction of matrices:")
for row in result_subtraction:
    print(row)

# Multiplication of matrices
result_multiplication = matrix_multiplication(matrix_A, matrix_B)
print("\nMultiplication of matrices:")
for row in result_multiplication:
    print(row)

# Transpose of matrix A
result_transpose = matrix_transpose(matrix_A)
print("\nTranspose of matrix A:")
for row in result_transpose:
    print(row)


#3.

'''

------------------------------------------------------------------------------------------------------------------------------------------------

3]]]Experiment Number 2 : Write a python program to store marks stored in subject "Fundamentals of Data Structure" by
                         N students in the class. Write functions to compute following:
                         1. The average score of the class.
                         2. Highest score and lowest score of the class.
                         3. Count of students who were absent for the test.
                         4. Display mark with highest frequency.
'''


# Function for average score of the class

def average(listofmarks):
    sum=0
    count=0
    for i in range(len(listofmarks)):
        if listofmarks[i]!=-999:
            sum+=listofmarks[i]
            count+=1
    avg=sum/count
    print("Total Marks : ", sum)
    print("Average Marks : {:.2f}".format(avg))

#<----------------------------------------------------------------------------------------------------->

# Function for Highest score in the test for the class

def Maximum(listofmarks):
    for i in range(len(listofmarks)):
        if listofmarks[i]!=-999:
            Max=listofmarks[0]
            break
    for i in range(1,len(listofmarks)):
        if listofmarks[i]>Max:
            Max=listofmarks[i]
    return(Max)

#<------------------------------------------------------------------------------------------------------>

# Function for Lowest score in the test for the class

def Minimum(listofmarks):
    for i in range(len(listofmarks)):
        if listofmarks[i]!=-999:
            Min=listofmarks[0]
            break
    for i in range(1,len(listofmarks)):
        if listofmarks[i]<Min:
            Min=listofmarks[i]
    return(Min)

#<------------------------------------------------------------------------------------------------------->

# Function for counting the number of students absent for the test

def absentcount(listofmarks):
    count=0
    for i in range(len(listofmarks)):
        if listofmarks[i]==-999:
            count+=1
    return(count)

#<------------------------------------------------------------------------------------------------------->

# Function for displaying marks with highest frequency
def maxFrequency(listofmarks):
    i=0
    Max=0
    print("Marks  |  Frequency")
    for j in listofmarks:
        if (listofmarks.index(j)==i):
            print(j,"    |  ",listofmarks.count(j))
            if listofmarks.count(j)>Max:
                Max=listofmarks.count(j)
                mark=j
        i=i+1
    return(mark,Max)


#<------------------------------------------------------------------------------------------------------->

# Main function

marksinFDS=[]
numberofstudents=int(input("Enter total number of students : "))
for i in range(numberofstudents):
    marks=int(input("Enter marks of student "+str(i+1)+" : "))
    marksinFDS.append(marks)

flag=1
while flag==1:
    print("\n\n--------------------MENU--------------------\n")
    print("1. Total and Average Marks of the Class")
    print("2. Highest and Lowest Marks in the Class")
    print("3. Number of Students absent for the test")
    print("4. Marks with Highest Frequency")
    print("5. Exit\n")
    ch=int(input("Enter your Choice (from 1 to 5) :"))

    if ch==1:
        average(marksinFDS)
        a = input("Do you want to continue (yes/no) :")
        if a == "yes":
            flag = 1
        else:
            flag = 0
            print("Thanks for using this program!")

    elif ch==2:
        print("Highest Score in Class : ", Maximum(marksinFDS))
        print("Lowest Score in Class : ", Minimum(marksinFDS))
        a = input("Do you want to continue (yes/no) :")
        if a == "yes":
            flag = 1
        else:
            flag = 0
            print("Thanks for using this program!")

    elif ch==3:
        print("Number of Students absent in the test : ", absentcount(marksinFDS))
        a = input("Do you want to continue (yes/no) :")
        if a == "yes":
            flag = 1
        else:
            flag = 0
            print("Thanks for using this program!")

    elif ch==4:
        mark,fr = maxFrequency(marksinFDS)
        print("Highest frequency is of marks {0} that is {1} ".format(mark,fr))
        a = input("Do you want to continue (yes/no) :")
        if a == "yes":
            flag = 1
        else:
            flag = 0
            print("Thanks for using this program!")

    elif ch==5:
        flag=0
        print("Thanks for using this program!")

    else:
        print("!!Wrong Choice!! ")
        a=input("Do you want to continue (yes/no) :")
        if a=="yes":
            flag=1
        else:
            flag=0
            print("Thanks for using this program!")

#<---------------------------------------------END OF PROGRAM---------------------------------------------------------------------------------->

#3.

4]]]Exp No 3: Write a Python program to store roll numbers of student in array who attended training program in random order. 
Write function for searching whether particular student attended training program or not, 
using Linear search and Sentinel search.

# code of linear search

def display(a, n):
    print(a)

def read(a, n):
    for i in range(n):
        a.append(int(input()))

def Linear_search(a, roll):
    for i in range(len(a)):
        if roll == a[i]:  # Corrected the comparison
            return i
    return -1  # Moved outside the loop

def main():
    a = []
    n = int(input("Enter the number of students who attended training program: "))
    print("Enter the roll numbers:")
    read(a, n)
    
    print("Following students attended:")
    display(a, n)
    
    roll_to_search = int(input("Which roll do you want to search? "))
    key = Linear_search(a, roll_to_search)
    
    if key != -1:
        print(f"Roll no. {a[key]} attended the program.")
    else:
        print(f"Roll no. {roll_to_search} did not attend the program.")

main()

# code of sentinel search

print("SENTINEL SEARCH........")
a = [12, 23, 45, 46, 56]
n = len(a)

def sentinel(a, key):
    last = a[n - 1]
    a[n - 1] = key
    i = 0
    while a[i] != key:
        i += 1
    a[n - 1] = last
    if (i < n - 1) or (key == a[n - 1]):
        print("Found at position:", i + 1)
    else:
        print("Not found")

sentinel(a, 48)
-----------------------------------------------------------------------------------------------------------------------------------------------
#4.

'''


5]]]Experiment No. 1 : In a second year computer engineering class, group A students play cricket, group B students play
                   badminton and group C students play football.
                   Write a python program using functions to compute following:
                   a) List of students who play both cricket and badminton.
                   b) List of students who play either cricket or badminton but not both.
                   c) Number of students who play neither cricket nor badminton.
                   d) Number of students who play cricket and football but not badminton.
(NOTE : While realising the group, duplicate entries should be avoided. Do not use SET built-in functions)
'''


# Function for removing duplicate entries from the group

def removeDuplicate(d):
    lst=[]
    for i in d:
        if i not in lst:
            lst.append(i)
    return lst

#<---------------------------------------------------------------------------------------->

# Function for finding intersection between two sets (A&B)

def intersection(lst1,lst2):
    lst3=[]
    for val in lst1:
        if val in lst2:
            lst3.append(val)
    return lst3

#<------------------------------------------------------------------------------------------>

# Function for finding union of two sets (A|B)

def union(lst1,lst2):
    lst3=lst1.copy()
    for val in lst2:
        if val not in lst3:
            lst3.append(val)
    return lst3

#<------------------------------------------------------------------------------------------->

# Function for finding difference between two sets (A-B)

def diff(lst1,lst2):
    lst3=[]
    for val in lst1:
        if val not in lst2:
            lst3.append(val)
    return lst3

#<---------------------------------------------------------------------------------------------->

# Function for finding symmetric difference of two sets (A^B)

def sym_diff(lst1,lst2):
    lst3=[]
    D1=diff(lst1,lst2)
    print("Difference between Cricket and Badminton (C-B) is : ", D1)
    D2=diff(lst2,lst1)
    print("Difference between Badminton and Cricket (B-C) is : ", D2)
    lst3=union(D1,D2)
    return lst3

#<------------------------------------------------------------------------------------------------>

# Functon for finding List of students who play both cricket and badminton

def CB(lst1,lst2):
    lst3=intersection(lst1,lst2)
    print("\n\nList of students who play both cricket and badminton is : ", lst3)
    return len(lst3)

#<------------------------------------------------------------------------------------------------>

# Function for finding List of students who play either cricket or badminton but not both

def eCeB(lst1,lst2):
    lst3=sym_diff(lst1,lst2)
    print("\nList of students who play either cricket or badminton but not both is : ",lst3)
    return len(lst3)

#<-------------------------------------------------------------------------------------------------->

# Function for finding Number of students who play neither cricket nor badminton

def nCnB(lst1,lst2,lst3):
    lst4=diff(lst1,union(lst2,lst3))
    print("\n\nList of students who play neither cricket nor badminton is : ",lst4)
    return len(lst4)

#<--------------------------------------------------------------------------------------------------->

# Function for finding Number of students who play cricket and football but not badminton

def CBnF(lst1,lst2,lst3):
    lst4=diff(intersection(lst1,lst2),lst3)
    print("\n\nList of students who play cricket and football but not badminton is : ",lst4)
    return len(lst4)

#<----------------------------------------------------------------------------------------------------->

# Main function

# Creating an empty list for SE COMP
SEComp = []
n = int(input("\nEnter number of students in SE COMP: "))
print("Enter the names of",n,"students (Please press ENTER after entering each students name) :")
for i in range(0, n):
    ele = input()
    SEComp.append(ele)  # adding the element
print("Original list of students in SEComp : " + str(SEComp))

#<------------------------------------------------------------------------------------------------------->


# Creating an empty list for Cricket
Cricket = []
n = int(input("\n\nEnter number of students who play cricket : "))
print("Enter the names of",n,"students who play cricket (Please press ENTER after entering each students name) :")
for i in range(0, n):
    ele = input()
    Cricket.append(ele)  # adding the element
print("Original list of students playing cricket is :" +str(Cricket))
Cricket=removeDuplicate(Cricket)
print("The list of students playing cricket after removing duplicates : " +str(Cricket))

#<------------------------------------------------------------------------------------------------------->


# Creating an empty list for Football
Football = []
n = int(input("\n\nEnter number of students who play football : "))
print("Enter the name of",n,"students who play football (Please press ENTER after entering each students name) :")
for i in range(0, n):
    ele = input()
    Football.append(ele)  # adding the element
print("Original list of students playing football :" +str(Football))
Football=removeDuplicate(Football)
print("The list of students playing football after removing duplicates : " +str(Football))

#<-------------------------------------------------------------------------------------------------------->


# Creating an empty list for Badminton
Badminton = []
n = int(input("\n\nEnter number of students who play badminton : "))
print("Enter the name of",n,"students who play badminton (Please press ENTER after entering each students name) :")
for i in range(0, n):
    ele = input()
    Badminton.append(ele)  # adding the element
print("Original list of students playing badminton :" +str(Badminton))
Badminton=removeDuplicate(Badminton)
print("The list of students playing badminton after removing duplicates : " +str(Badminton))

#<---------------------------------------------------------------------------------------------------------->

flag=1
while flag==1:
    print("\n\n--------------------MENU--------------------\n")
    print("1. List of students who play both cricket and badminton")
    print("2. List of students who play either cricket or badminton but not both")
    print("3. List of students who play neither cricket nor badminton")
    print("4. Number of students who play cricket and football but not badminton")
    print("5. Exit\n")
    ch=int(input("Enter your Choice (from 1 to 5) :"))

    if ch==1:
        print("Number of students who play both cricket and badminton : ", CB(Cricket,Badminton))
        a = input("\n\nDo you want to continue (yes/no) :")
        if a == "yes":
            flag = 1
        else:
            flag = 0
            print("Thanks for using this program!")

    elif ch==2:
        print("Number of students who play either cricket or badminton but not both : ", eCeB(Cricket, Badminton))
        a = input("\n\nDo you want to continue (yes/no) :")
        if a == "yes":
            flag = 1
        else:
            flag = 0
            print("Thanks for using this program!")

    elif ch==3:
        print("Number of students who play neither cricket nor badminton : ", nCnB(SEComp,Cricket,Badminton))
        a = input("\n\nDo you want to continue (yes/no) :")
        if a == "yes":
            flag = 1
        else:
            flag = 0
            print("Thanks for using this program!")

    elif ch==4:
        print("Number of students who play cricket and football but not badminton : ", CBnF(Cricket,Football,Badminton))
        a = input("\n\nDo you want to continue (yes/no) :")
        if a == "yes":
            flag = 1
        else:
            flag = 0
            print("Thanks for using this program!")

    elif ch==5:
        flag=0
        print("Thanks for using this program!")

    else:
        print("!!Wrong Choice!! ")
        a=input("\n\nDo you want to continue (yes/no) :")
        if a=="yes":
            flag=1
        else:
            flag=0
            print("Thanks for using this program!")

#<---------------------------------------------END OF PROGRAM---------------------------------------------------------------------------------->

#5.

'''


6]]]Experiment Number 14: Write a python program to store first year percentage of students in an array.
                      Write function for sorting array of floating point numbers in ascending order using:
                      a) Selection Sort
                      b) Bubble Sort and display top five scores
'''


# Function for Selection Sort of elements

def Selection_Sort(marks):
    for i in range(len(marks)):

        # Find the minimum element in remaining unsorted array
        min_idx = i
        for j in range(i + 1, len(marks)):
            if marks[min_idx] > marks[j]:
                min_idx = j

        # Swap the minimum element with the first element
        marks[i], marks[min_idx] = marks[min_idx], marks[i]

    print("Marks of students after performing Selection Sort on the list : ")
    for i in range(len(marks)):
        print(marks[i])

#<--------------------------------------------------------------------------------------->

# Function for Bubble Sort of elements

def Bubble_Sort(marks):
    n = len(marks)
    # Traverse through all array elements
    for i in range(n - 1):
        # Last i elements are already in place
        for j in range(0, n - i - 1):

            # Traverse the array from 0 to n-i-1
            # Swap if the element found is greater than the next element
            if marks[j] > marks[j + 1]:
                marks[j], marks[j + 1] = marks[j + 1], marks[j]

    print("Marks of students after performing Bubble Sort on the list :")
    for i in range(len(marks)):
        print(marks[i])

#<--------------------------------------------------------------------------------------->

# Function for displaying top five marks

def top_five_marks(marks):
    print("Top",len(marks),"Marks are : ")
    print(*marks[::-1], sep="\n")

#<---------------------------------------------------------------------------------------->

# Main

marks=[]
n = int(input("Enter number of students whose marks are to be displayed : "))
print("Enter marks for",n,"students (Press ENTER after every students marks): ")
for i in range(0, n):
    ele = int(input())
    marks.append(ele)  # adding the element

print("The marks of",n,"students are : ")
print(marks)

flag=1;
while flag==1:
    print("\n---------------MENU---------------")
    print("1. Selection Sort of the marks")
    print("2. Bubble Sort of the marks")
    print("3. Exit")
    ch=int(input("\n\nEnter your choice (from 1 to 3) : "))

    if ch==1:
        Selection_Sort(marks)
        a=input("\nDo you want to display top marks from the list (yes/no) : ")
        if a=='yes':
            top_five_marks(marks)
        else:
            print("\nThanks for using this program!")
            flag=0

    elif ch==2:
        Bubble_Sort(marks)
        a = input("\nDo you want to display top five marks from the list (yes/no) : ")
        if a == 'yes':
            top_five_marks(marks)
        else:
            print("\nThanks for using this program!")
            flag = 0

    elif ch==3:
        print("\nThanks for using this program!!")
        flag=0

    else:
        print("\nEnter a valid choice!!")
        print("\nThanks for using this program!!")
        flag=0


#<----------------------------------------END OF PROGRAM--------------------------------------------------------------------------------------->

#6.

7]]]Exp No.3: Write a Python program to store roll numbers of student array who attended training program in sorted order. 
Write function for searching whether particular student attended training program or not, 
using Binary search and Fibonacci search

# code for binary search

def binary_search(arr, x):
    left, right = 0, len(arr) - 1

    while left <= right:
        mid = left + (right - left) // 2

        # Check if x is present at the mid
        if arr[mid] == x:
            return True
        # If x is greater, ignore left half
        elif arr[mid] < x:
            left = mid + 1
        # If x is smaller, ignore right half
        else:
            right = mid - 1

    return False


def insert_sorted_roll_numbers(roll_numbers, roll_number):
    # Assuming roll_numbers is already sorted
    roll_numbers.append(roll_number)
    roll_numbers.sort()  # Sorting the roll numbers after insertion


# Example roll numbers of students who attended the training program
attended_roll_numbers = [2, 5, 8, 10, 15, 20, 25, 30]

# Function to check if a specific roll number attended the program
def check_attendance(roll):
    return binary_search(attended_roll_numbers, roll)


# Test the function
roll_number_to_check = 15
if check_attendance(roll_number_to_check):
    print(f"Roll number {roll_number_to_check} attended the training program.")
else:
    print(f"Roll number {roll_number_to_check} did not attend the training program.")


# code for Fibonacci search

def fibonacci_search(arr, x):
    fib_n_minus_2 = 0
    fib_n_minus_1 = 1
    fib = fib_n_minus_1 + fib_n_minus_2

    while fib < len(arr):
        fib_n_minus_2 = fib_n_minus_1
        fib_n_minus_1 = fib
        fib = fib_n_minus_1 + fib_n_minus_2

    offset = -1

    while fib > 1:
        i = min(offset + fib_n_minus_2, len(arr) - 1)

        if arr[i] == x:
            return i
        elif arr[i] < x:
            fib = fib_n_minus_1
            fib_n_minus_1 = fib_n_minus_2
            fib_n_minus_2 = fib - fib_n_minus_1
            offset = i
        else:
            fib = fib_n_minus_2
            fib_n_minus_1 = fib_n_minus_1 - fib_n_minus_2
            fib_n_minus_2 = fib - fib_n_minus_1

    if fib_n_minus_1 and arr[offset + 1] == x:
        return offset + 1

    return -1

def insert_sorted(arr, roll):
    # Assuming the array is already sorted
    # If not, sorting logic can be added here before insertion
    arr.append(roll)
    arr.sort()

# Example usage:
roll_numbers = [12, 23, 34, 45, 56, 67, 78, 89]
insert_sorted(roll_numbers, 50)  # Inserting a new roll number (50)
print("Sorted Roll Numbers:", roll_numbers)

# Search for a specific roll number using Fibonacci Search
roll_to_search = 45
result_fibonacci = fibonacci_search(roll_numbers, roll_to_search)
if result_fibonacci != -1:
    print(f"Roll number {roll_to_search} attended the program (Fibonacci Search).")
else:
    print(f"Roll number {roll_to_search} did not attend the program (Fibonacci Search).")

------------------------------------------------------------------------------------------------------------------------------------------------

8]]]In any language program mostly syntax error occurs due to unbalancing delimiter such as
(),{},[]. Write C++ program using stack to check whether given expression is well parenthesized or not.
*/


#include <iostream>
using namespace std;
#define size 10

class stackexp
{
    int top;
    char stk[size];
public:
    stackexp()
    {
     top=-1;
    }
    void push(char);
    char pop();
    int isfull();
    int isempty();
};

void stackexp::push(char x)
{
    top=top+1;
    stk[top]=x;
}

char stackexp::pop()
{
    char s;
    s=stk[top];
    top=top-1;
    return s;
}

int stackexp::isfull()
{
    if(top==size)
        return 1;
    else
        return 0;
}

int stackexp::isempty()
{
    if(top==-1)
        return 1;
    else
        return 0;
}

int main()
{
    stackexp s1;
    char exp[20],ch;
    int i=0;
    cout << "\n\t!! Parenthesis Checker..!!!!" << endl; // prints !!!Hello World!!!
    cout<<"\nEnter the expression to check whether it is in well form or not :  ";
    cin>>exp;
    if((exp[0]==')')||(exp[0]==']')||(exp[0]=='}'))
    {
        cout<<"\n Invalid Expression.....\n";
        return 0;
    }
    else
    {
        while(exp[i]!='\0')
        {
            ch=exp[i];
            switch(ch)
            {
            case '(':s1.push(ch);break;
            case '[':s1.push(ch);break;
            case '{':s1.push(ch);break;
            case ')':s1.pop();break;
            case ']':s1.pop();break;
            case '}':s1.pop();break;
            }
            i=i+1;
        }
    }
    if(s1.isempty())
    {
        cout<<"\nExpression is well parenthesised...\n";
    }
    else
    {
        cout<<"\nSorry !!! Invalid Expression or not in well parenthesized....\n";
    }
    return 0;
}



//output [(a + b) * c,)a + b(,a+b

------------------------------------------------------------------------------------------------------------------------------------------------

/*
9]]]Queues are frequently used in computer programming, and a typical example is the creation of a job queue by an operating system. 
If the operating system does not use priorities, then the jobs are processed in the order they enter the system.
Write C++ program for simulating job queue. Write functions to add job and delete job from queue.
*/

#include <iostream>
#define MAX 10
using namespace std;
struct queue
{       int data[MAX];
	int front,rear;
};
class Queue
{    struct queue q;
   public:
      Queue(){q.front=q.rear=-1;}
      int isempty();
      int isfull();
      void enqueue(int);
      int delqueue();
      void display();
};
int Queue::isempty()
{
	return(q.front==q.rear)?1:0;
}
int Queue::isfull()
{    return(q.rear==MAX-1)?1:0;}
void Queue::enqueue(int x)
{q.data[++q.rear]=x;}
int Queue::delqueue()
{return q.data[++q.front];}
void Queue::display()
{   int i;
    cout<<"\n";
    for(i=q.front+1;i<=q.rear;i++)
	     cout<<q.data[i]<<" ";
}
int main()
{      Queue obj;
	int ch,x;
	do{    cout<<"\n 1.Insert Job\n 2.Delete Job\n 3.Display\n 4.Exit\n Enter your choice : ";
	       cin>>ch;
	switch(ch)
	{  case 1: if (!obj.isfull())
		   {   cout<<"\n Enter data : \n";
			cin>>x;
			obj.enqueue(x);
			cout<<endl;
		   }
	          else
		      cout<< "Queue is overflow!!!\n\n";
	           break;
	   case 2: if(!obj.isempty())
			    cout<<"\n Deleted Element = "<<obj.delqueue()<<endl;
		    else
			{   cout<<"\n Queue is underflow!!!\n\n";  }
		    cout<<"\nRemaining Jobs : \n";
		    obj.display();
	           break;
	  case 3: if (!obj.isempty())
	        {  cout<<"\n Queue contains : \n";
		       obj.display();
	        }
	        else
		         cout<<"\n Queue is empty!!!\n\n";
	       break;
	  case 4: cout<<"\n Exiting Program.....";
        }
      }while(ch!=4);
return 0;
}
------------------------------------------------------------------------------------------------------------------------------------------------
/*
10]]]A double-ended queue (deque) is a linear list in which additions and deletions may be made at either end. Obtain a data
representation mapping a deque into a one-dimensional array. Write C++ program to simulate deque with functions to add 
and delete elements from either end of the deque. 
*/


    #include<iostream>
#include<stdio.h>
#define MAX 10
using namespace std;

struct que
{
    int arr[MAX];
    int front,rear;
};

void init(struct que *q)
{
    q->front=-1;
    q->rear=-1;
}

void print(struct que q)
{
    int i;
    i=q.front;
    while(i!=q.rear)
    {
        cout<<"\t"<<q.arr[i];
        i=(i+1)%MAX;
    }
    cout<<"\t"<<q.arr[q.rear];
}

int isempty(struct que q)
{
    return q.rear==-1?1:0;
}

int isfull(struct que q)
{
    return (q.rear+1)%MAX==q.front?1:0;
}

void addf(struct que *q,int data)
{
    if(isempty(*q))
    {
        q->front=q->rear=0;
        q->arr[q->front]=data;
    }
    else
    {
        q->front=(q->front-1+MAX)%MAX;
        q->arr[q->front]=data;
    }
}

void addr(struct que *q,int data)
{
    if(isempty(*q))
    {
        q->front=q->rear=0;
        q->arr[q->rear]=data;
    }
    else
    {
        q->rear=(q->rear+1)%MAX;
        q->arr[q->rear]=data;
    }
}

int delf(struct que *q)
{
    int data1;
    data1=q->arr[q->front];
    if(q->front==q->rear)
        init(q);
    else
        q->front=(q->front+1)%MAX;
    return data1;
}

int delr(struct que *q)
{
    int data1;
    data1=q->arr[q->rear];
    if(q->front==q->rear)
        init(q);
    else
        q->rear=(q->rear-1+MAX)%MAX;
    return data1;
}

int main()
{
    struct que q;
    int data,ch;
    init(&q);
    while(ch!=6)
    {
        cout<<"\t\n1.Insert front"
                "\t\n2.Insert rear"
                "\t\n3.Delete front"
                "\t\n4.Delete rear"
                "\t\n5.Print"
                "\t\n6.Exit";
         cout<<"\nEnter your choice : ";
        cin>>ch;
        switch(ch)
        {
           case 1:
              cout<<"\nEnter data to insert front : ";
              cin>>data;
              addf(&q,data);
              break;

           case 2:
               cout<<"\nEnter the data to insert rear : ";
               cin>>data;
               addr(&q,data);
               break;

           case 3:
               if(isempty(q))
                   cout<<"\nDequeue is empty!!!";
               else
               {
                   data=delf(&q);
                   cout<<"\nDeleted data is : "<<data;
               }
               break;

           case 4:
               if(isempty(q))
                   cout<<"\nDequeue is empty!!!";
               else
               {
                   data=delr(&q);
                   cout<<"\nDeleted data is : "<<data;
               }
               break;

           case 5:
                if(isempty(q))
                    cout<<"\nDequeue is empty!!!";
                else
                {
                    cout<<"\nDequeue elements are : ";
                    print(q);
                }
                break;
        }
    }
    return 0;
}


// Example 1:
//1.Input:

//2.Insert front: 5
//3.Insert rear: 10
//4.Print
//5.Delete front
//6.Print
//7.Insert front: 7
//8.Insert rear: 12
//9.Delete rear
//10.Print
//11.Exit


/*
------------------------------------------------------------------------------------------------------------------------------------------------

11]]] A palindrome is a string of character that‘s the same forward and backward. Typically, punctuation, capitalization, 
and spaces are ignored. For example, “Poor Dan is in a droop” is a palindrome, as can be seen by examining the characters
“poor danisina droop” and observing that they are the same forward and backward. One way to check for a palindrome is to reverse
the characters in the string and then compare with them the original-in a palindrome, the sequence will be identical. Write C++ program 
with functions- 
a) To print original string followed by reversed string using stack 
b) To check whether given string is palindrome or not

*/

#include<iostream>
#include<string.h>
#define max 50
using namespace std;

class STACK
{
	private:
		char a[max];
		int top;
	
	public:
		STACK()
		{
			top=-1;	
		}	
		
		void push(char);
		void reverse();	
		void convert(char[]);
		void palindrome();
};

void STACK::push(char c)
{
	top++;
	a[top] = c;
	a[top+1]='\0';
	
	cout<<endl<<c<<" is pushed on stack ...";
}

void STACK::reverse()
{
	char str[max];
	
	cout<<"\n\nReverse string is : ";
		
	for(int i=top,j=0; i>=0; i--,j++)
	{
		cout<<a[i];
		str[j]=a[i];
	}
	
	cout<<endl;
}


void STACK::convert(char str[])
{
	int j,k,len = strlen(str);

	for(j=0, k=0; j<len; j++)
	{
		if( ( (int)str[j] >= 97 && (int)str[j] <=122 ) || ( (int)str[j] >= 65 && (int)str[j] <=90 ))
		{
			if( (int)str[j] <=90 )
			{
				str[k] = (char)( (int)str[j] + 32 );
			}else
			{
				str[k] = str[j];				
			}

			k++;			
		}
	}
	str[k]='\0';

	cout<<endl<<"Converted String : "<<str<<"\n";
}




void STACK::palindrome()
{	
	char str[max];
	int i,j;		

	for(i=top,j=0; i>=0; i--,j++)
	{
		str[j]=a[i];
	}
	str[j]='\0';
	
	
	if(strcmp(str,a) == 0)
		cout<<"\n\nString is palindrome...";
	else
		cout<<"\n\nString is not palindrome...";
}


int main()
{
	STACK stack;

	char str[max];
	int i=0;
	
	cout<<"\nEnter string to be reversed and check is it palindrome or not : \n\n";
	
	cin.getline(str , 50);
	
	stack.convert(str);
	
	while(str[i] != '\0')
	{
		stack.push(str[i]);
		i++;
	}

	stack.palindrome();

	stack.reverse();
	
}

------------------------------------------------------------------------------------------------------------------------------------------------
/*
 
12]]]
Department of Computer Engineering has student's club named
'Pinnacle Club'. Students of Second, third and final year of
department can be granted membership on request. Similarly one
may cancel the membership of club. First node is reserved for
president of club and last node is reserved for secretary of
club. Write C++ program to maintain club member‘s information
using singly linked list. Store student PRN and Name. Write
functions to
a) Add and delete the members as well as president or even
secretary.
b) Compute total number of members of club
c) Display members
d) Display list in reverse order using recursion
e) Two linked lists exists for two divisions. Concatenate two
lists
*/

# include<stdio.h>
# include <iostream>
# include<string>
using namespace std;
class list;
class node
{
int prn;
string name;
node *next;
public:
node(int
x, string
nm)
{
prn = x;
next = NULL;
name = nm;
}
friend

class list;
};
class list
{
node * start;
public:
list()
{
start = NULL;
}
void
create();
void
display();
void
insertAtBeginning();
void
insertAtEnd();
void
insertAfter();
void
deleteAtFirst();
void
deleteByValue();
void
deleteAtEnd();
int
computeTotal();
void
sortList();
void
concatList(list & q1);
void
displayRev(node * t);
bool
reverseDisplay() // function is only
for passing start as argument to recursive function
{
if (start == NULL)
return false;
node * temp = start;
displayRev(temp);
// cout << "(President)";
return true;
}
};
void

list::displayRev(node * t)
{
if (t == NULL)
return;
else
{
displayRev(t->next);
cout << "\nPRN NO:" << t->prn << " Name: " << t->name;
}
}
void
list::create()
{
int
no;
string
nam;
if (start == NULL)
{
cout << "Enter PRN number: ";
cin >> no;
cout << "Enter name: ";
cin >> nam;
cout << nam;
start = new
node(no, nam);
cout << "\n=============== List Created ===============";
}
else
{
cout << "\nList is already created.";
}
}
void
list::display()
{
node * t;
t = start;
if (start == NULL)
cout << "\nList is Empty";
else
{cout << "\n=============== List: ===============\n";
while (t != NULL){
cout << t->prn << " " << t->name << " \n";
t=t->next;
}
// cout << t->prn << " " << t->name << " \n";
}
}
void

list::insertAtBeginning()
{
int
no;
string
nam;
node * temp;
if (start == NULL)
{
create();
}
else
{
cout << "\nEnter PRN Number : ";
cin >> no;
cout << "Enter Name : ";
cin >> nam;
// cout << nam;
temp = new
node(no, nam);
temp->next = start;
start = temp;;
cout << "Inserted " << temp->name << " at the
beginning.";
}
}
void
list::insertAtEnd()
{
int
no;
string
nam;
node * t;
if (start == NULL)
create();
else
{
cout << "\nEnter PRN Number : ";
cin >> no;
cout << "Enter Name : ";
cin >> nam;
t = start;
while (t->next != NULL)
t = t->next;
node * p = new
node(no, nam);
t->next = p;
}
}

void
list::insertAfter()
{
int
prev_no;
cout << "\nEnter PRN No. after do you want insert : ";
cin >> prev_no;
node * t;
t = start;
string
nam;
int
flag = 0, no;
while (t != NULL)
{
if (t->prn == prev_no)
{
flag = 1;
break;
}
t = t->next;
}
if (flag == 1)
{
node * p;
cout << "\nEnter PRN Number : ";
cin >> no;
cout << "Enter Name : ";
cin >> nam;
p=new node(no, nam);
p->next=t->next;
t->next=p;
}
else
{
cout << "\n" << prev_no << " is not in list.";
}
}
void list::
deleteAtFirst()
{
node * t;
if (start == NULL)
cout << "\nClub is Empty..";
else
{
t=start;
start=start->next;
t->next=NULL; // Not necessary

delete t;
cout << "\nPresident deleted..";
}
}
void list::
deleteByValue()
{
int
no, flag = 0;
node * t, *prev;
if (start == NULL)
cout << "\nList/Club is empty";
else
{
cout << "\nEnter PRN No. of member to be deleted : ";
cin >> no;
t=start->next; // t=start if we have to delete president also..start->next is first member
while (t->next != NULL)
{
if (t->prn == no)
{
flag = 1;
break;
}
prev = t;
t = t->next;
}
if (flag == 1)
{
prev->next=t->next;
t->next=NULL;
delete t;
cout << "\nMember with PRN No: " << no << " is deleted.";
}
else
cout << "\nMember not found in List./President or Secretary cannot be deleted.";
}
}
void list::
deleteAtEnd()
{
node * t, *prev;
t = start;
if (start == NULL)
cout << "\nClub is Empty..";
else
{

while (t->next != NULL)
{
prev = t;
t = t->next;
}
prev->next = NULL;
delete
t;
cout << "\nSecretary Deleted.";
}
}
int
list::computeTotal()
{
node * t;
int
count = 0;
t = start;
if (start == NULL)
{
cout << "\nList is empty.";
return 0;
}
while (t != NULL)
{
count + +;
t = t->next;
}
return count;
}
void
list::sortList()
{
node * i, *j, *last = NULL;
int
tprn;
string
tname;
if (start == NULL)
{
cout << "\nList is empty.";
return;
}
for (i=start;i->next != NULL;i=i->next)
{
for (j=start;j->next != last;j=j->next)
{

if ((j->prn) > (j->next->prn))

{
tprn = j->prn;
tname = j->name;
j->prn = j->next->prn;
j->name = j->next->name;
j->next->prn = tprn;
j->next->name = tname;
}
}
}
cout << "\n List is sorted.";

display();

}
void
list::concatList(list & q1)
{

node * t, *p;
t = q1.start;
if (t == NULL)
{

cout << "\nList 2 is empty";

return;
}
p = start; // first
list
while (p->next != NULL)
{
p = p->next;
}

p->next = t;
q1.start = NULL; // second
list is set
to
null
cout << "\nAfter concatenation list : \n";

display();
}
int
main()
{
list * l;
int
choice, selectList;
list
l1, l2;
l = & l1;
X: cout << "\nSelect List\n1.List 1\n2.List 2\nEnter choice : ";

cin >> selectList;
if (selectList == 1)
{
l = & l1;
}
else if (selectList == 2)
{
l = & l2;
}
else
{

cout << "\nWrong list Number.";
goto
X;
}
do
{

cout << "\n1. Create\n2. Insert President\n3. Insert secretary\n4. Insert after position(member)\n";
cout<<"5. Display list\n6. Delete President\n7.Delete Secretary\n8. Delete Member\n9. Find total No. of members\n10. Sort list\n11. Reselect List";
cout<< "\n12. Combine lists\n13.Reverse Display\n0. Exit\nEnter your choice :\t";
cin >> choice;
switch(choice)

{

case
1: l->create();
break;
case
2: l->insertAtBeginning();

break;
case
3: l->insertAtEnd();

break;
case

4: l->insertAfter();
break;
case
5: l->display();

break;
case
6: l->deleteAtFirst();

break;
case

7: l->deleteAtEnd();

break;

case

8: l->deleteByValue();

break;
case
9: cout << "\nTotal members(including President & Secretary) : " << l->computeTotal();
break;
case
10: l->sortList();

break;
case
11:
goto
X;
break;
case
12:
l1.concatList(l2);

break;
case
13:
l->reverseDisplay();
break;
deafult:
cout << "Wrong choice";
}

}while (choice != 0);
cout << "\n=============== GOOD BYE ===============\n";
return 0;

}
-----------------------------------------------------------------------------------------------------------------------------------------------

/*
13]] Pizza parlor accepting maximum M orders. 
Orders are served in first come first served basis. Order once placed can not be cancelled. 
Write C++ program to simulate the system using circular queue using array.
*/


#include<iostream>
using namespace std;
const int MAX=5;

class PizzaParlour
{
	int front,rear;
	int orders [MAX];
	public:
		PizzaParlour()
		{
			front=rear=-1;
		}
		bool addOrder(int data);
		void serveOrder();
		void display();
};
bool PizzaParlour::addOrder(int id){
	if(rear==-1)
	{
		front=rear=0;
		orders[rear]=id;
		return true;
	 }
	 else
	 {
		int pos=(rear+1)%MAX;
		if (pos==front)
		{
			cout<<"\nCafe is Full.Please wait.\n";
			return false;
		 }
		 else
		 {
			rear=pos;
			orders[rear]=id;
			return true;
		 }
	 }
 }

 void PizzaParlour::serveOrder()
 {
	if(front==-1)
	{
		cout<<"\n No Orders in Cafe.[Cafe is Empty)\n";
		return;
	 }
	 else
	 {
		cout<<"\n Order No. "<<orders[front]<<" is processed.\n";
		if(front==rear) //only one order
		{
			front=rear=-1;
		 }
		 else
		 {
			front=(front+1)%MAX;
		 }
	 }
 }

 void PizzaParlour::display()
 {
	int i=0;
	if(front==-1)
	{
		cout<<"\nCafe is Empty.No orders.\n";
		return;
	 }
	 else
	 {
		cout<<"Order Id's: \n";
		for(i=front;i!=rear;i=((i+1)%MAX))
		{
			cout<<orders[i]<<"  ";
		 }
		cout<<orders[rear];
	 }
 }
 void intro()
 {	char name[50]={"\n Vaibhav Cafe \n"};
		for(int i=0;name[i]!='\0';i++)
	{
		cout<<name[i];
		
	}
 }
int main()
 {
	int ch,id=0;

	PizzaParlour q;

	do
	{
		cout<<"\n-----------------";
	intro();
		cout<<"-----------------";
		cout<<"\n****Menu*****\n";
		cout<<"1. Accept order\n";
		cout<<"2. Serve order\n";
		cout<<"3. Display orders\n";
		cout<<"4. Exit";

		cout<<"\nChoice: ";
		cin>>ch;

		switch(ch)
		{
		case 1: 
				id++;
				if(q.addOrder(id))
				{
					cout<<"Thank you for order.Order id is : "<<id;
				}
				else
				{
					id--;
				}
				break;

		case 2: q.serveOrder();
				break;

		case 3: q.display();
				break;
		}
	}while (ch!=4);
	cout<<"\nThankYou.Keep Visiting.";

 }
------------------------------------------------------------------------------------------------------------------------------------------------
//write 1 then 2 after that 3 then output will be cafe is empty

14]]] Experiment No. 16 : Write a python program to store first year percentage of students in array.
                    Write function for sorting array of floating point numbers in ascending order using
                    quick sort and display top five scores.
'''


# Function for accepting the percentage of the Students

def input_percentage():
    perc = []
    number_of_students = int(input("Enter the number of Students : "))
    for i in range(number_of_students):
        perc.append(float(input("Enter the percentage of Student {0} : ".format(i+1))))
    return perc

#<--------------------------------------------------------------------------------------------------------------------->

# Function for printing the percentage of the Students

def print_percentage(perc):
    for i in range(len(perc)):
        print(perc[i],sep = "\n")

#<--------------------------------------------------------------------------------------------------------------------->

# Function for performing partition of the Data

def percentage_partition(perc,start,end):
    pivot = perc[start]
    lower_bound = start + 1
    upper_bound = end

    while True:
        while lower_bound <= upper_bound and perc[lower_bound] <= pivot:
            lower_bound += 1

        while lower_bound <= upper_bound and perc[upper_bound] >= pivot:
            upper_bound -= 1

        if lower_bound <= upper_bound:
            perc[lower_bound],perc[upper_bound] = perc[upper_bound],perc[lower_bound]

        else:
            break


    perc[start],perc[upper_bound] = perc[upper_bound],perc[start]

    return upper_bound

#<--------------------------------------------------------------------------------------------------------------------->

# Function for performing Quick Sort on the Data

def Quick_Sort(perc,start,end):
    while start < end:
        partition = percentage_partition(perc,start,end)
        Quick_Sort(perc,start,partition-1)
        Quick_Sort(perc,partition+1,end)
        return perc

#<--------------------------------------------------------------------------------------------------------------------->

# Function for Displaying Top Five Percentages of Students

def display_top_five(perc):
    print("Top Five Percentages are : ")
    if len(perc) < 5:
        start, stop = len(perc) - 1, -1
    else:
        start, stop = len(perc) - 1, len(perc) - 6

    for i in range(start, stop, -1):
        print(perc[i],sep = "\n")


#<--------------------------------------------------------------------------------------------------------------------->

# Main

unsorted_percentage = []
sorted_percentage = []
flag = 1

while flag == 1:
    print("\n--------------------MENU--------------------")
    print("1. Accept the Percentage of Students")
    print("2. Display the Percentages of Students")
    print("3. Perform Quick Sort on the Data")
    print("4. Exit")

    ch = int(input("Enter your choice (from 1 to 4) : "))

    if ch == 1:
        unsorted_percentage = input_percentage()

    elif ch == 2:
        print_percentage(unsorted_percentage)

    elif ch == 3:
        print("Percentages of Students after performing Quick Sort : ")
        sorted_percentage = Quick_Sort(unsorted_percentage,0,len(unsorted_percentage)-1)
        print_percentage(sorted_percentage)
        a = input("Do you want to display the Top 5 Percentages of Students (yes/no) : ")
        if a == 'yes':
            display_top_five(sorted_percentage)

    elif ch == 4:
        print("Thanks for using this program!!")
        flag = 0

    else:
        print("Invalid Choice!!")


#<-----------------------------------------------END OF PROGRAM-------------------------------------------------------->

15]]] Exp No.5: Second year Computer Engineering class, set A of students like Vanilla Ice-cream and set B of students like butterscotch ice-cream. Write C++ program to store two sets using linked list. compute and display-
a) Set of students who like both vanilla and butterscotch
b) Set of students who like either vanilla or butterscotch or not both
c) Number of students who like neither vanilla nor butterscotch


# code

#include <iostream>
#include <unordered_set>

// Node structure for the linked list
struct Node {
    int data;
    Node* next;
};

// Function to insert elements into the linked list
void insert(Node*& head, int data) {
    Node* newNode = new Node();
    newNode->data = data;
    newNode->next = head;
    head = newNode;
}

// Function to display elements in the linked list
void display(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        std::cout << temp->data << " ";
        temp = temp->next;
    }
    std::cout << std::endl;
}

// Function to compute sets and counts
void computeSets(Node* vanillaHead, Node* butterscotchHead) {
    std::unordered_set<int> setA, setB, intersection, unionSet;
    
    // Inserting elements of set A (vanilla) into setA
    Node* tempA = vanillaHead;
    while (tempA != nullptr) {
        setA.insert(tempA->data);
        tempA = tempA->next;
    }
    
    // Inserting elements of set B (butterscotch) into setB
    Node* tempB = butterscotchHead;
    while (tempB != nullptr) {
        setB.insert(tempB->data);
        tempB = tempB->next;
    }

    // Computing intersection
    for (int elem : setA) {
        if (setB.find(elem) != setB.end()) {
            intersection.insert(elem);
        }
    }

    // Computing union
    for (int elem : setA) {
        unionSet.insert(elem);
    }
    for (int elem : setB) {
        unionSet.insert(elem);
    }

    // Displaying sets
    std::cout << "Students who like both vanilla and butterscotch: ";
    for (int elem : intersection) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    std::cout << "Students who like either vanilla or butterscotch or not both: ";
    for (int elem : unionSet) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;

    // Computing number of students who like neither vanilla nor butterscotch
    std::unordered_set<int> complement;
    for (int i = 1; i <= 10; ++i) { // Assuming 10 students for demonstration
        if (unionSet.find(i) == unionSet.end()) {
            complement.insert(i);
        }
    }
    std::cout << "Number of students who like neither vanilla nor butterscotch: " << complement.size() << std::endl;
}

int main() {
    // Creating linked lists for set A (vanilla) and set B (butterscotch)
    Node* vanillaHead = nullptr;
    Node* butterscotchHead = nullptr;

    // Inserting elements into set A
    insert(vanillaHead, 2);
    insert(vanillaHead, 4);
    insert(vanillaHead, 6);

    // Inserting elements into set B
    insert(butterscotchHead, 4);
    insert(butterscotchHead, 6);
    insert(butterscotchHead, 8);

    // Displaying elements in set A and set B
    std::cout << "Set A (Students who like Vanilla): ";
    display(vanillaHead);

    std::cout << "Set B (Students who like Butterscotch): ";
    display(butterscotchHead);

    // Computing and displaying sets
    computeSets(vanillaHead, butterscotchHead);

    return 0;
}
