g ={
    0:[1,2],
    1:[0,3,4],
    2:[0,3],
    3:[1,2,4],
    4:[1,3]
}

def dfs(g,s):
    vis[s] = 1
    print(s)
    for c in g[s]:
        if not vis[c]:
            dfs(g,c)
            
vis = [0]*5

print("Dfs is :")
dfs(g,0)
 
print("bfs is:")
def bfs(g,s):
    q = [s]
    vis = [s]
    while q:
        cur = q.pop(0)
        print(cur)
        for c in g[cur]:
            if c not in vis:
                q.append(c)
                vis.append(c)
    
bfs(g,0)

///a***
import heapq

# Structure to represent a node in the graph
class Node:
    def __init__(self, index, g_cost, h_cost):
        self.index = index  # Index of the node
        self.g_cost = g_cost  # Cost from start node to this node
        self.h_cost = h_cost  # Heuristic cost (estimated cost from this node to goal node)
        self.f_cost = g_cost + h_cost  # f(n) = g(n) + h(n)

    # Custom comparison method for priority queue
    def __lt__(self, other):
        return self.f_cost < other.f_cost

# A* algorithm function
def AStar(graph, heuristic, start, goal):
    n = len(graph)

    # Priority queue to store nodes to be explored, ordered by f_cost
    open_list = []

    # Add the start node to the open list
    heapq.heappush(open_list, Node(start, 0, heuristic[start]))

    # Set to keep track of visited nodes
    visited = set()

    while open_list:
        # Get the node with the lowest f_cost from the open list
        current = heapq.heappop(open_list)

        # Check if the current node is the goal
        if current.index == goal:
            return current.g_cost

        # Mark current node as visited
        visited.add(current.index)

        # Expand current node
        for neighbor in range(n):
            # Check if there is a connection from current node to neighbor and neighbor is not visited
            if graph[current.index][neighbor] != 0 and neighbor not in visited:
                g_cost = current.g_cost + graph[current.index][neighbor]
                h_cost = heuristic[neighbor]
                f_cost = g_cost + h_cost

                # Add neighbor to open list
                heapq.heappush(open_list, Node(neighbor, g_cost, h_cost))

    # If goal node is not reachable
    return -1

# Main function
def main():
    n = int(input("Enter the number of nodes: "))
    graph = []

    print("Enter the adjacency matrix:")
    for _ in range(n):
        graph.append(list(map(int, input().split())))

    heuristic = list(map(int, input("Enter the heuristic values for each node: ").split()))

    start = int(input("Enter the start node: "))
    goal = int(input("Enter the goal node: "))

    shortest_path_cost = AStar(graph, heuristic, start, goal)

    if shortest_path_cost == -1:
        print(f"No path found from node {start} to node {goal}")
    else:
        print(f"Shortest path cost from node {start} to node {goal} is: {shortest_path_cost}")

if __name__ == "__main__":
    main()


///nqueens
from typing import List

class Solution:
    def isSafe(self, row, col, board, n):
        # Check if there is a queen in the same row to the left
        for i in range(col):
            if board[row][i] == 'Q':
                return False
        
        # Check if there is a queen in the upper left diagonal
        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
            if board[i][j] == 'Q':
                return False
        
        # Check if there is a queen in the lower left diagonal
        for i, j in zip(range(row, n), range(col, -1, -1)):
            if board[i][j] == 'Q':
                return False
        
        return True
    
    def solve(self, col, board, ans, n):
        if col == n:
            ans.append(["".join(row) for row in board])
            return
        
        for row in range(n):
            if self.isSafe(row, col, board, n):
                board[row][col] = 'Q'
                self.solve(col + 1, board, ans, n)
                board[row][col] = '.'
    
    def solveNQueens(self, n: int) -> List[List[str]]:
        ans = []
        board = [['.' for _ in range(n)] for _ in range(n)]
        self.solve(0, board, ans, n)
        return ans

if __name__ == "__main__":
    s = Solution()
    n = int(input("Enter the n: "))
    result = s.solveNQueens(n)
    for board in result:
        for row in board:
            print(row)
        print()

//prims algo
import sys

class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]

    def min_key(self, key, mst_set):
        min_val = sys.maxsize
        for v in range(self.V):
            if key[v] < min_val and mst_set[v] is False:
                min_val = key[v]
                min_index = v
        return min_index

    def prim_mst(self):
        key = [sys.maxsize] * self.V
        parent = [None] * self.V
        key[0] = 0
        mst_set = [False] * self.V

        parent[0] = -1

        for _ in range(self.V):
            u = self.min_key(key, mst_set)
            mst_set[u] = True

            for v in range(self.V):
                if self.graph[u][v] > 0 and mst_set[v] is False and key[v] > self.graph[u][v]:
                    key[v] = self.graph[u][v]
                    parent[v] = u

        return parent

    def print_mst(self, parent):
        print("Edge \tWeight")
        for i in range(1, self.V):
            print(parent[i], "-", i, "\t", self.graph[i][parent[i]])

g = Graph(5)
g.graph = [
    [0, 2, 0, 6, 0],
    [2, 0, 3, 8, 5],
    [0, 3, 0, 0, 7],
    [6, 8, 0, 0, 9],
    [0, 5, 7, 9, 0]
]

parent = g.prim_mst()
g.print_mst(parent)

//chatbot

import random

# Dictionary containing predefined responses
responses = {
    "hello": ["Hello!", "Hi there!", "Hey!"],
    "how_are_you": ["I'm good, thank you!", "I'm doing well, thanks for asking!"],
    "name": ["My name is Chatbot.", "You can call me Chatbot."],
    "default": ["I'm not sure what you mean...", "Can you please clarify?"]
}

def chatbot():
    print("Hello! I'm a chatbot. How can I assist you today?")

    while True:
        user_input = input("You: ").lower()

        if user_input == "bye":
            print("Chatbot: Goodbye!")
            break

        response = responses.get(user_input, responses["default"])
        print(f"Chatbot: {random.choice(response)}")

if __name__ == "__main__":
    chatbot()
